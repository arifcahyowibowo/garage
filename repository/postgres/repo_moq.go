// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"projectapi/models"
	"sync"
)

var (
	lockRepoPostgresMockGetCarPosition        sync.RWMutex
	lockRepoPostgresMockGetGaragesByID        sync.RWMutex
	lockRepoPostgresMockGetPositionByGarageID sync.RWMutex
	lockRepoPostgresMockPrepareQuery          sync.RWMutex
)

// Ensure, that RepoPostgresMock does implement RepoPostgres.
// If this is not the case, regenerate this file with moq.
var _ RepoPostgres = &RepoPostgresMock{}

// RepoPostgresMock is a mock implementation of RepoPostgres.
//
//     func TestSomethingThatUsesRepoPostgres(t *testing.T) {
//
//         // make and configure a mocked RepoPostgres
//         mockedRepoPostgres := &RepoPostgresMock{
//             GetCarPositionFunc: func(idcar string) []models.CarPosition {
// 	               panic("mock out the GetCarPosition method")
//             },
//             GetGaragesByIDFunc: func(garageID int) models.Garages {
// 	               panic("mock out the GetGaragesByID method")
//             },
//             GetPositionByGarageIDFunc: func(garageID int) []models.Position {
// 	               panic("mock out the GetPositionByGarageID method")
//             },
//             PrepareQueryFunc: func()  {
// 	               panic("mock out the PrepareQuery method")
//             },
//         }
//
//         // use mockedRepoPostgres in code that requires RepoPostgres
//         // and then make assertions.
//
//     }
type RepoPostgresMock struct {
	// GetCarPositionFunc mocks the GetCarPosition method.
	GetCarPositionFunc func(idcar string) []models.CarPosition

	// GetGaragesByIDFunc mocks the GetGaragesByID method.
	GetGaragesByIDFunc func(garageID int) models.Garages

	// GetPositionByGarageIDFunc mocks the GetPositionByGarageID method.
	GetPositionByGarageIDFunc func(garageID int) []models.Position

	// PrepareQueryFunc mocks the PrepareQuery method.
	PrepareQueryFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// GetCarPosition holds details about calls to the GetCarPosition method.
		GetCarPosition []struct {
			// Idcar is the idcar argument value.
			Idcar string
		}
		// GetGaragesByID holds details about calls to the GetGaragesByID method.
		GetGaragesByID []struct {
			// GarageID is the garageID argument value.
			GarageID int
		}
		// GetPositionByGarageID holds details about calls to the GetPositionByGarageID method.
		GetPositionByGarageID []struct {
			// GarageID is the garageID argument value.
			GarageID int
		}
		// PrepareQuery holds details about calls to the PrepareQuery method.
		PrepareQuery []struct {
		}
	}
}

// GetCarPosition calls GetCarPositionFunc.
func (mock *RepoPostgresMock) GetCarPosition(idcar string) []models.CarPosition {
	if mock.GetCarPositionFunc == nil {
		panic("RepoPostgresMock.GetCarPositionFunc: method is nil but RepoPostgres.GetCarPosition was just called")
	}
	callInfo := struct {
		Idcar string
	}{
		Idcar: idcar,
	}
	lockRepoPostgresMockGetCarPosition.Lock()
	mock.calls.GetCarPosition = append(mock.calls.GetCarPosition, callInfo)
	lockRepoPostgresMockGetCarPosition.Unlock()
	return mock.GetCarPositionFunc(idcar)
}

// GetCarPositionCalls gets all the calls that were made to GetCarPosition.
// Check the length with:
//     len(mockedRepoPostgres.GetCarPositionCalls())
func (mock *RepoPostgresMock) GetCarPositionCalls() []struct {
	Idcar string
} {
	var calls []struct {
		Idcar string
	}
	lockRepoPostgresMockGetCarPosition.RLock()
	calls = mock.calls.GetCarPosition
	lockRepoPostgresMockGetCarPosition.RUnlock()
	return calls
}

// GetGaragesByID calls GetGaragesByIDFunc.
func (mock *RepoPostgresMock) GetGaragesByID(garageID int) models.Garages {
	if mock.GetGaragesByIDFunc == nil {
		panic("RepoPostgresMock.GetGaragesByIDFunc: method is nil but RepoPostgres.GetGaragesByID was just called")
	}
	callInfo := struct {
		GarageID int
	}{
		GarageID: garageID,
	}
	lockRepoPostgresMockGetGaragesByID.Lock()
	mock.calls.GetGaragesByID = append(mock.calls.GetGaragesByID, callInfo)
	lockRepoPostgresMockGetGaragesByID.Unlock()
	return mock.GetGaragesByIDFunc(garageID)
}

// GetGaragesByIDCalls gets all the calls that were made to GetGaragesByID.
// Check the length with:
//     len(mockedRepoPostgres.GetGaragesByIDCalls())
func (mock *RepoPostgresMock) GetGaragesByIDCalls() []struct {
	GarageID int
} {
	var calls []struct {
		GarageID int
	}
	lockRepoPostgresMockGetGaragesByID.RLock()
	calls = mock.calls.GetGaragesByID
	lockRepoPostgresMockGetGaragesByID.RUnlock()
	return calls
}

// GetPositionByGarageID calls GetPositionByGarageIDFunc.
func (mock *RepoPostgresMock) GetPositionByGarageID(garageID int) []models.Position {
	if mock.GetPositionByGarageIDFunc == nil {
		panic("RepoPostgresMock.GetPositionByGarageIDFunc: method is nil but RepoPostgres.GetPositionByGarageID was just called")
	}
	callInfo := struct {
		GarageID int
	}{
		GarageID: garageID,
	}
	lockRepoPostgresMockGetPositionByGarageID.Lock()
	mock.calls.GetPositionByGarageID = append(mock.calls.GetPositionByGarageID, callInfo)
	lockRepoPostgresMockGetPositionByGarageID.Unlock()
	return mock.GetPositionByGarageIDFunc(garageID)
}

// GetPositionByGarageIDCalls gets all the calls that were made to GetPositionByGarageID.
// Check the length with:
//     len(mockedRepoPostgres.GetPositionByGarageIDCalls())
func (mock *RepoPostgresMock) GetPositionByGarageIDCalls() []struct {
	GarageID int
} {
	var calls []struct {
		GarageID int
	}
	lockRepoPostgresMockGetPositionByGarageID.RLock()
	calls = mock.calls.GetPositionByGarageID
	lockRepoPostgresMockGetPositionByGarageID.RUnlock()
	return calls
}

// PrepareQuery calls PrepareQueryFunc.
func (mock *RepoPostgresMock) PrepareQuery() {
	if mock.PrepareQueryFunc == nil {
		panic("RepoPostgresMock.PrepareQueryFunc: method is nil but RepoPostgres.PrepareQuery was just called")
	}
	callInfo := struct {
	}{}
	lockRepoPostgresMockPrepareQuery.Lock()
	mock.calls.PrepareQuery = append(mock.calls.PrepareQuery, callInfo)
	lockRepoPostgresMockPrepareQuery.Unlock()
	mock.PrepareQueryFunc()
}

// PrepareQueryCalls gets all the calls that were made to PrepareQuery.
// Check the length with:
//     len(mockedRepoPostgres.PrepareQueryCalls())
func (mock *RepoPostgresMock) PrepareQueryCalls() []struct {
} {
	var calls []struct {
	}
	lockRepoPostgresMockPrepareQuery.RLock()
	calls = mock.calls.PrepareQuery
	lockRepoPostgresMockPrepareQuery.RUnlock()
	return calls
}
